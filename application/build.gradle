plugins {
    id 'module-config'
    id 'spring-conventions'
    id 'com.gradleup.shadow' version '9.0.0-beta4'
    id 'io.spring.dependency-management'
    id "com.gorylenko.gradle-git-properties" version "2.4.1"
    id("org.owasp.dependencycheck") version "8.4.2"
    id "org.sonarqube" version "5.0.0.4638"
}

group = 'be.kdg.prog6'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = '21'
    targetCompatibility = '21'
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

gitProperties {
    extProperty = 'gitProps' // git properties will be put in a map at project.ext.gitProps
}
generateGitProperties.outputs.upToDateWhen { false } // make sure the generateGitProperties task always executes (even when git.properties is not changed)

task printGitProperties(dependsOn: 'generateGitProperties') { // make sure generateGitProperties task to execute before accessing generated properties
    doLast {
        println "git.commit.id.abbrev=" + project.ext.gitProps['git.commit.id.abbrev']
    }
}

springBoot {
    buildInfo()
}

dependencyCheck {
    suppressionFile = rootProject.file('suppression.xml')
    analyzers {
        assemblyEnabled = false
    }
    formats = [ "HTML", "XML" ]
}

ext {
    set('springCloudAzureVersion', "5.7.0")
}

dependencies {
    implementation project(":common")
    implementation project(':gamemanagementcontext')
    implementation project(':playermanagementcontext')
    implementation project(':gamestatisticscontext')
    implementation project(':lobbymanagementcontext')
    implementation project(':storecontext')
    implementation project(':chatbotcontext')

    runtimeOnly 'com.mysql:mysql-connector-j'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'javax.servlet:javax.servlet-api:4.0.1'

    implementation 'com.azure.spring:spring-cloud-azure-starter-keyvault'
    implementation 'com.azure.spring:spring-cloud-azure-starter'

    developmentOnly 'org.springframework.boot:spring-boot-devtools'

    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'

    implementation platform('org.springframework.boot:spring-boot-dependencies:3.1.1')

    implementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    testImplementation 'com.tngtech.archunit:archunit-junit5:1.3.0'
    testImplementation 'org.testcontainers:testcontainers:1.20.2'
    testImplementation 'org.testcontainers:junit-jupiter:1.20.2'
    testImplementation 'org.testcontainers:mysql:1.20.2'

    implementation 'org.springframework.boot:spring-boot-starter-amqp'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-resource-server'

    implementation 'org.keycloak:keycloak-core:25.0.5'
    implementation 'org.keycloak:keycloak-server-spi:25.0.5'
    implementation 'org.keycloak:keycloak-services:25.0.5'
    implementation 'com.microsoft.sqlserver:mssql-jdbc'

    implementation 'org.wildfly.client:wildfly-client-config:1.0.1.Final'

    runtimeOnly("org.jboss.resteasy:resteasy-client-api:6.2.4.Final") { transitive = false }
    runtimeOnly("org.jboss.resteasy:resteasy-client:6.2.4.Final") { transitive = false }

    implementation "com.fasterxml.jackson.datatype:jackson-datatype-jsr310"

    implementation 'jakarta.servlet:jakarta.servlet-api:5.0.0'
}

dependencyManagement {
    imports {
        mavenBom "com.azure.spring:spring-cloud-azure-dependencies:${springCloudAzureVersion}"
    }
}

bootBuildImage {
    builder = "paketobuildpacks/builder-jammy-base:latest"
    imageName = "gameplatformacr.azurecr.io/integration5team3gameplatform"
    tags = ["gameplatformacr.azurecr.io/integration5team3gameplatform:${-> project.ext.gitProps['git.commit.id.abbrev']}"]
    publish = true
    docker {
        publishRegistry {
            username = System.getenv("IMAGE_USERNAME_WILL")
            password = System.getenv("IMAGE_PASSWORD_WILL")
        }
    }
}

tasks.withType(JavaCompile) {
    options.incremental = true // Enable incremental compilation for faster builds
}

gradle.projectsEvaluated {
    tasks.withType(JavaCompile) {
        options.encoding = 'UTF-8'
    }
}



//
shadowJar {
    archiveBaseName.set('keycloak-event-listener')
    archiveVersion.set('1.0.0')
    archiveClassifier.set('')
    // Shade Hibernate classes to avoid conflicts
    relocate 'org.hibernate', 'com.example.shaded.hibernate'

    exclude 'org/keycloak/'

// Exclude RESTEasy and Wildfly if they are already provided by Keycloak
    exclude 'org/jboss/resteasy/'
    exclude 'org/wildfly/'

    mergeServiceFiles() // Ensures service files are merged correctly
}

tasks.build {
    dependsOn shadowJar
}

bootJar {
    archiveBaseName.set('application')
}

tasks.named('bootJar') {
    archiveBaseName.set('application')
    archiveVersion.set('0.0.1-SNAPSHOT')  // Optional: To set the version explicitly
    archiveClassifier.set('')            // Optional: Remove any additional classifier like 'plain'
}


tasks.register('cleanBuildImage') {
    dependsOn 'clean', 'build', 'bootBuildImage'
}

////include with library jars if u do complete build, with other modules, can swithc it off anc createa regular jar the build gardle for application build.gralde