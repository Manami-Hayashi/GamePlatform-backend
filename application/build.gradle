plugins {
    id 'module-config'
    id 'spring-conventions'
    id 'com.github.johnrengelman.shadow' version '8.1.1'
    id 'io.spring.dependency-management'
    id "com.gorylenko.gradle-git-properties" version "2.4.1"
    id("org.owasp.dependencycheck") version "8.4.2"
    id "org.sonarqube" version "5.0.0.4638"
}

group = 'be.kdg.prgramming6'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = '21'
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

gitProperties {
    extProperty = 'gitProps' // git properties will be put in a map at project.ext.gitProps

}
generateGitProperties.outputs.upToDateWhen { false } // make sure the generateGitProperties task always executes (even when git.properties is not changed)

task printGitProperties(dependsOn: 'generateGitProperties') { // make sure generateGitProperties task to execute before accessing generated properties
    doLast {
        println "git.commit.id.abbrev=" + project.ext.gitProps['git.commit.id.abbrev']
    }
}

springBoot {
    buildInfo()
}

dependencyCheck {
    suppressionFile = rootProject.file('suppression.xml')
    analyzers {
        assemblyEnabled = false
    }
    formats = [ "HTML", "XML" ]
}

ext {
    set('springCloudAzureVersion', "5.7.0")
}


dependencies {
    implementation project(":common")
    implementation project(':gameManagementContext')
    implementation project(':playerManagementContext')
    implementation project(':gameStatisticsContext')
    implementation project(':lobbyManagementContext')
    implementation project(':storeContext')
    implementation project(':chatbotContext')

    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    runtimeOnly 'com.mysql:mysql-connector-j'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'javax.servlet:javax.servlet-api:4.0.1'

    // Spring cloud AZURE
    implementation 'com.azure.spring:spring-cloud-azure-starter-actuator'
    implementation 'com.azure.spring:spring-cloud-azure-starter-keyvault'
    implementation 'com.azure.spring:spring-cloud-azure-starter'

    developmentOnly 'org.springframework.boot:spring-boot-devtools'

    // Mapping library
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'

    // Use Spring Boot dependencies to ensure alignment
    implementation platform('org.springframework.boot:spring-boot-dependencies:3.1.1')

    testImplementation 'org.springframework.amqp:spring-rabbit-test'

    implementation 'org.springframework.boot:spring-boot-starter-amqp'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-resource-server'

// Keycloak dependencies
    compileOnly('org.keycloak:keycloak-core:25.0.5') {
        exclude group: 'org.wildfly', module: 'wildfly-common'
    }
    compileOnly 'org.keycloak:keycloak-server-spi:25.0.5'
// Optional: Add if specific classes from `keycloak-services` are needed
    compileOnly 'org.keycloak:keycloak-services:25.0.5'

// Include additional libraries if necessary
    implementation 'org.wildfly.client:wildfly-client-config:1.0.1.Final'

    runtimeOnly("org.jboss.resteasy:resteasy-client-api:6.2.4.Final") { transitive = false }
    runtimeOnly("org.jboss.resteasy:resteasy-client:6.2.4.Final") { transitive = false }

// JSON support (optional, if used in listener logic)
    implementation "com.fasterxml.jackson.datatype:jackson-datatype-jsr310"

    implementation 'jakarta.servlet:jakarta.servlet-api:5.0.0'

}

dependencyManagement {
    imports {
        mavenBom "com.azure.spring:spring-cloud-azure-dependencies:${springCloudAzureVersion}"
    }
}


//bootBuildImage {
//    builder = "paketobuildpacks/builder-jammy-base:latest"
//    imageName = "acrkdgworkshop.azurecr.io/integration5hello"
//    tags = ["acrkdgworkshop.azurecr.io/integration5hello:${-> project.ext.gitProps['git.commit.id.abbrev']}"]
//    publish = true
//    docker {
//        publishRegistry {
//            username =  System.getenv("IMAGE_USERNAME")
//            password = System.getenv("IMAGE_PASSWORD")
//        }
//    }
//}


shadowJar {
    archiveBaseName.set('keycloak-event-listener')
    archiveVersion.set('1.0.0')
    archiveClassifier.set('')
    // Shade Hibernate classes to avoid conflicts
    relocate 'org.hibernate', 'com.example.shaded.hibernate'

    exclude 'org/keycloak/**'

// Exclude RESTEasy and Wildfly if they are already provided by Keycloak
    exclude 'org/jboss/resteasy/**'
    exclude 'org/wildfly/**'

    mergeServiceFiles() // Ensures service files are merged correctly
}

tasks.build {
    dependsOn shadowJar
}
