plugins {
    id 'module-config'
    id 'io.spring.dependency-management'
    id "com.gorylenko.gradle-git-properties" version "2.4.1"
    id("org.owasp.dependencycheck") version "8.4.2"
}

group = 'be.kdg.prgramming6'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = '21'
    targetCompatibility = '21'
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

gitProperties {
    extProperty = 'gitProps' // git properties will be put in a map at project.ext.gitProps

}
generateGitProperties.outputs.upToDateWhen { false } // make sure the generateGitProperties task always executes (even when git.properties is not changed)

task printGitProperties(dependsOn: 'generateGitProperties') { // make sure generateGitProperties task to execute before accessing generated properties
    doLast {
        println "git.commit.id.abbrev=" + project.ext.gitProps['git.commit.id.abbrev']
    }
}

springBoot {
    buildInfo()
}

dependencyCheck {
    suppressionFile = rootProject.file('suppression.xml')
    analyzers {
        assemblyEnabled = false
    }
    formats = [ "HTML", "XML" ]
}

ext {
    set('springCloudAzureVersion', "5.7.0")
}


dependencies {
    implementation project(':common')

    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-amqp'
    implementation 'org.springframework.boot:spring-boot-starter-webflux'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'

    implementation 'com.fasterxml.jackson.core:jackson-databind:2.2.2'
    implementation 'com.fasterxml.jackson.core:jackson-core:2.2.2'
    implementation 'com.fasterxml.jackson.core:jackson-annotations:2.2.2'
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-joda:2.2.2'

    runtimeOnly 'com.mysql:mysql-connector-j'
    testImplementation 'org.testcontainers:mysql:1.20.2'
    implementation 'org.springframework.boot:spring-boot-starter-websocket'

    // Spring cloud AZURE
    implementation 'com.azure.spring:spring-cloud-azure-starter-actuator'
    implementation 'com.azure.spring:spring-cloud-azure-starter-keyvault'
    implementation 'com.azure.spring:spring-cloud-azure-starter'

    developmentOnly 'org.springframework.boot:spring-boot-devtools'

    // Mapping library
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'

    // Use Spring Boot dependencies to ensure alignment
    implementation platform('org.springframework.boot:spring-boot-dependencies:3.1.1')

    testImplementation 'org.testcontainers:mysql:1.20.2'

}

dependencyManagement {
    imports {
        mavenBom "com.azure.spring:spring-cloud-azure-dependencies:${springCloudAzureVersion}"
    }
}

bootBuildImage {
    builder = "paketobuildpacks/builder-jammy-base:latest"
    imageName = "acrgamearena.azurecr.io/team3lobbymanagement"
    tags = ["acrgamearena.azurecr.io/team3lobbymanagement:${-> project.ext.gitProps['git.commit.id.abbrev']}"]
    publish = true
    docker {
        publishRegistry {
            username =  System.getenv("IMAGE_USERNAME_WILL")
            password = System.getenv("IMAGE_PASSWORD_WILL")
        }
    }
}



